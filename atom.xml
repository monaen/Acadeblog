<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Free Wind</title>
  <subtitle>An artist blog about computer vision</subtitle>
  <link href="/Acadeblog/atom.xml" rel="self"/>
  
  <link href="http://monaen.github.io/Acadeblog/"/>
  <updated>2016-06-02T17:54:07.000Z</updated>
  <id>http://monaen.github.io/Acadeblog/</id>
  
  <author>
    <name>Nan meng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mxnet note</title>
    <link href="http://monaen.github.io/Acadeblog/2016/06/02/mxnetnote/"/>
    <id>http://monaen.github.io/Acadeblog/2016/06/02/mxnetnote/</id>
    <published>2016-06-01T16:00:00.000Z</published>
    <updated>2016-06-02T17:54:07.000Z</updated>
    
    <content type="html">&lt;p&gt;Here we briefly introduce how to train your own network based on your own dataset using &lt;a href=&quot;https://github.com/dmlc/mxnet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mxnet&lt;/a&gt; – a lightweight deep learning framework designed for both efficiency and flexibility.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Training-your-own-data-using-Mxnet&quot;&gt;&lt;a href=&quot;#Training-your-own-data-using-Mxnet&quot; class=&quot;headerlink&quot; title=&quot;Training your own data using Mxnet !!!&quot;&gt;&lt;/a&gt;Training your own data using Mxnet !!!&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Here we briefly introduce how to train your own network based on your own dataset using &lt;a href=&quot;https://github.com/dmlc/mxnet&quot;&gt;Mxnet&lt;/a&gt; – a lightweight deep learning framework designed for both efficiency and flexibility.&lt;br&gt;
    
    </summary>
    
      <category term="note" scheme="http://monaen.github.io/Acadeblog/categories/note/"/>
    
    
      <category term="DeepLearning" scheme="http://monaen.github.io/Acadeblog/tags/DeepLearning/"/>
    
      <category term="Mxnet" scheme="http://monaen.github.io/Acadeblog/tags/Mxnet/"/>
    
      <category term="Note" scheme="http://monaen.github.io/Acadeblog/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>Deep learning training tips</title>
    <link href="http://monaen.github.io/Acadeblog/2016/06/02/TrainingTips/"/>
    <id>http://monaen.github.io/Acadeblog/2016/06/02/TrainingTips/</id>
    <published>2016-06-01T16:00:00.000Z</published>
    <updated>2016-06-02T16:51:30.000Z</updated>
    
    <content type="html">&lt;p&gt;Techniques for turning high-level parameters of deep networks has been studied for years and this blog summarize some famous previous work to provide some incepts for turning the parameters.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/Acadeblog/images/test.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Techniques for turning high-level parameters of deep networks has been studied for years and this blog summarize some famous previous work to provide some incepts for turning the parameters.&lt;br&gt;
    
    </summary>
    
      <category term="note" scheme="http://monaen.github.io/Acadeblog/categories/note/"/>
    
    
      <category term="deep learning" scheme="http://monaen.github.io/Acadeblog/tags/deep-learning/"/>
    
      <category term="training tips" scheme="http://monaen.github.io/Acadeblog/tags/training-tips/"/>
    
      <category term="training tricks" scheme="http://monaen.github.io/Acadeblog/tags/training-tricks/"/>
    
  </entry>
  
  <entry>
    <title>Something About Matlab</title>
    <link href="http://monaen.github.io/Acadeblog/2016/05/20/SomethingAboutMatlab/"/>
    <id>http://monaen.github.io/Acadeblog/2016/05/20/SomethingAboutMatlab/</id>
    <published>2016-05-19T16:00:00.000Z</published>
    <updated>2016-05-23T16:49:30.000Z</updated>
    
    <content type="html">&lt;p&gt;This blog records some useful tricks about matlab, and such tricks can help write matlab codes more efficiently and easy to understand…&lt;/p&gt;
&lt;h2 id=&quot;matlab-writing-styles&quot;&gt;&lt;a href=&quot;#matlab-writing-styles&quot; class=&quot;headerlink&quot; title=&quot;matlab writing styles&quot;&gt;&lt;/a&gt;matlab writing styles&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;for&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for i = 1:size(E, 1),&amp;#10;    v = E(i, 1); % variable&amp;#10;    x = E(i, 2); % value&amp;#10;&amp;#10;    ......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Matlab-functions&quot;&gt;&lt;a href=&quot;#Matlab-functions&quot; class=&quot;headerlink&quot; title=&quot;Matlab functions&quot;&gt;&lt;/a&gt;Matlab functions&lt;/h2&gt;&lt;h3 id=&quot;accumarray-summary-the-values-by-index&quot;&gt;&lt;a href=&quot;#accumarray-summary-the-values-by-index&quot; class=&quot;headerlink&quot; title=&quot;* accumarray: summary the values by index&quot;&gt;&lt;/a&gt;* accumarray: summary the values by index&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A = [10 20 30 40];&amp;#10;idx = [1 1 1 2];&amp;#10;result = accumarray(idx&amp;#39;,A)&amp;#10;&amp;#10;  result =&amp;#10;&amp;#10;      60&amp;#10;      40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This blog records some useful tricks about matlab, and such tricks can help write matlab codes more efficiently and easy to understand…&lt;/
    
    </summary>
    
      <category term="matlab" scheme="http://monaen.github.io/Acadeblog/categories/matlab/"/>
    
    
      <category term="command" scheme="http://monaen.github.io/Acadeblog/tags/command/"/>
    
      <category term="matlab" scheme="http://monaen.github.io/Acadeblog/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>PRML Reading notes</title>
    <link href="http://monaen.github.io/Acadeblog/2016/05/20/PRML_readingnotes/"/>
    <id>http://monaen.github.io/Acadeblog/2016/05/20/PRML_readingnotes/</id>
    <published>2016-05-19T16:00:00.000Z</published>
    <updated>2016-06-02T14:49:12.000Z</updated>
    
    <content type="html">&lt;p&gt;The second chapter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Determine suituable variables:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;In a frequentist treatment: specific values for the parameters by optimizing some criterion, such as the likelihood function.&lt;/li&gt;
&lt;li&gt;In a Bayesian treatment:    introduce the prior distributions over the parameters and then use Bayes’s theorem to compute the corresponding posterior distribution given the observed data.&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;The second chapter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Determine suituable variables:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;In a frequentist treatment: specific values for the pa
    
    </summary>
    
      <category term="PRML" scheme="http://monaen.github.io/Acadeblog/categories/PRML/"/>
    
    
      <category term="PRML" scheme="http://monaen.github.io/Acadeblog/tags/PRML/"/>
    
      <category term="notes" scheme="http://monaen.github.io/Acadeblog/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>Caffe Learning Notes(1)</title>
    <link href="http://monaen.github.io/Acadeblog/2016/05/03/Caffe-Learning-Notes1/"/>
    <id>http://monaen.github.io/Acadeblog/2016/05/03/Caffe-Learning-Notes1/</id>
    <published>2016-05-02T16:00:00.000Z</published>
    <updated>2016-05-03T16:29:43.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Define-the-‘’CaffeNet’’-by-iPython&quot;&gt;&lt;a href=&quot;#Define-the-‘’CaffeNet’’-by-iPython&quot; class=&quot;headerlink&quot; title=&quot;Define the ‘’CaffeNet’’ by iPython&quot;&gt;&lt;/a&gt;Define the ‘’CaffeNet’’ by iPython&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def conv_relu(bottom, ks, nout, stride = 1, pad = 0, group = 1,&amp;#10;              param = learned_param,&amp;#10;              weight_filler=dict(type=&amp;#39;gaussian&amp;#39;, std=0.01),&amp;#10;              bias_filler=dict(type=&amp;#39;constant&amp;#39;, value=0.1)):&amp;#10;    &amp;#39;&amp;#39;&amp;#39; ks: is the kernel size&amp;#10;        nout: is the number of output&amp;#10;        &amp;#10;        This convolution layer is defined to be preprossed with gaussian filler&amp;#10;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;weight_filler&lt;/code&gt; is the &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Define-the-‘’CaffeNet’’-by-iPython&quot;&gt;&lt;a href=&quot;#Define-the-‘’CaffeNet’’-by-iPython&quot; class=&quot;headerlink&quot; title=&quot;Define the ‘’CaffeNet’’ 
    
    </summary>
    
      <category term="notes" scheme="http://monaen.github.io/Acadeblog/categories/notes/"/>
    
    
      <category term="Caffe" scheme="http://monaen.github.io/Acadeblog/tags/Caffe/"/>
    
      <category term="notes" scheme="http://monaen.github.io/Acadeblog/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>CS231n</title>
    <link href="http://monaen.github.io/Acadeblog/2016/04/21/cs231n-note/"/>
    <id>http://monaen.github.io/Acadeblog/2016/04/21/cs231n-note/</id>
    <published>2016-04-20T16:00:00.000Z</published>
    <updated>2016-04-28T07:49:16.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Notes-for-Class-CS231n&quot;&gt;&lt;a href=&quot;#Notes-for-Class-CS231n&quot; class=&quot;headerlink&quot; title=&quot;Notes for Class CS231n&quot;&gt;&lt;/a&gt;Notes for Class CS231n&lt;/h1&gt;&lt;p&gt;This page is the learning notes of Class &lt;a href=&quot;http://cs231n.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CS231n&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Data preprocessing: Normalize the features in your data to have zero mean and unit variance before feed into the deep model.&lt;/li&gt;
&lt;li&gt;Split data tricks: This setting depends on how many hyperparameters you have and how much of an influence you expect them to have.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;kNN defaults:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;remember all the data, i.e. store all the data into storage&lt;/li&gt;
&lt;li&gt;classify a single image cost much.(every classification need much computation)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2&quot;&gt;&lt;a href=&quot;#2&quot; class=&quot;headerlink&quot; title=&quot;2&quot;&gt;&lt;/a&gt;2&lt;/h2&gt;&lt;p&gt;Approach of neural network to do the classification task:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;score function: maps the raw data to class scores.&lt;/li&gt;
&lt;li&gt;loss function: quantify the agreement between the predicted scores.&lt;br&gt;cast as an optimization problem.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;single matrix multiplication WxiWxi is effectively evaluating 10 separate classifiers in parallel where each classifier is a row of &lt;strong&gt;W&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;classifying the test image involves a single matrix multiplication and addition, faster than comparing each test images to all training images which kNN use.&lt;br&gt;That’s also why we do like to use deep model although the training part is time-consuming, the test part is just a matrix multiplication and addition with complex O(n).&lt;/p&gt;
&lt;p&gt; Depending on precisely what values we set for these weights,function has the capacity to like or dislike (depending on the sign of each weight) certain colors at certain positions in the image. That is to say the color have influence on the accuracy of classification.&lt;/p&gt;
&lt;!--  --&gt;
&lt;h1 id=&quot;Linear-Classification&quot;&gt;&lt;a href=&quot;#Linear-Classification&quot; class=&quot;headerlink&quot; title=&quot;Linear Classification&quot;&gt;&lt;/a&gt;Linear Classification&lt;/h1&gt;&lt;h2 id=&quot;SVM&quot;&gt;&lt;a href=&quot;#SVM&quot; class=&quot;headerlink&quot; title=&quot;SVM&quot;&gt;&lt;/a&gt;SVM&lt;/h2&gt;&lt;p&gt;The format of SVM loss takes one particular approach to measuring how consistent the predictions on training data are with the ground truth labels. Additionally, &lt;strong&gt;making good predictions&lt;/strong&gt; on the training set is &lt;strong&gt;equivalent to minimizing the loss&lt;/strong&gt;.&lt;/p&gt;
&lt;!-- ![tool-editor](https://www.zybuluo.com/static/img/toolbar-editor.png) --&gt;
&lt;h2 id=&quot;Paramters-Configuration&quot;&gt;&lt;a href=&quot;#Paramters-Configuration&quot; class=&quot;headerlink&quot; title=&quot;Paramters Configuration&quot;&gt;&lt;/a&gt;Paramters Configuration&lt;/h2&gt;&lt;p&gt;Setting Delta($\Delta$)&lt;br&gt;&lt;strong&gt;Question:&lt;/strong&gt; What value should it be set to, and do we have to cross-validate it?&lt;br&gt;&lt;strong&gt;Tips:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$\Delta$ and $\lambda$: they both control the tradeoff between the &lt;code&gt;data loss&lt;/code&gt; and the &lt;code&gt;regularization loss&lt;/code&gt; in the objective. &lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Notes-for-Class-CS231n&quot;&gt;&lt;a href=&quot;#Notes-for-Class-CS231n&quot; class=&quot;headerlink&quot; title=&quot;Notes for Class CS231n&quot;&gt;&lt;/a&gt;Notes for Class CS231n&lt;/h1&gt;&lt;p&gt;This page is the learning notes of Class &lt;a href=&quot;http://cs231n.github.io/&quot;&gt;CS231n&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="note" scheme="http://monaen.github.io/Acadeblog/categories/note/"/>
    
    
      <category term="deep learning" scheme="http://monaen.github.io/Acadeblog/tags/deep-learning/"/>
    
      <category term="note" scheme="http://monaen.github.io/Acadeblog/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Caffe Training Note</title>
    <link href="http://monaen.github.io/Acadeblog/2016/04/21/caffe/"/>
    <id>http://monaen.github.io/Acadeblog/2016/04/21/caffe/</id>
    <published>2016-04-20T16:00:00.000Z</published>
    <updated>2016-04-21T03:21:53.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;ImageNet&quot;&gt;&lt;a href=&quot;#ImageNet&quot; class=&quot;headerlink&quot; title=&quot;ImageNet&quot;&gt;&lt;/a&gt;ImageNet&lt;/h2&gt;&lt;p&gt;This part is a simplified instruction of training own data using &lt;a href=&quot;http://caffe.berkeleyvision.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Caffe&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-Preparing-the-dataset&quot;&gt;&lt;a href=&quot;#1-Preparing-the-dataset&quot; class=&quot;headerlink&quot; title=&quot;1. Preparing the dataset&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. Preparing the dataset&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;The final dataset should be like this:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;data&amp;#10;   -- train&amp;#10;      -- train1.jpg&amp;#10;&amp;#9;  -- train2.jpg&amp;#10;&amp;#9;  -- train3.jpg&amp;#10;&amp;#9;     ......&amp;#10;   -- val&amp;#10;&amp;#9;  -- val1.jpg&amp;#10;&amp;#9;  -- val2.jpg&amp;#10;&amp;#9;  -- val3.jpg&amp;#10;&amp;#9;     ......&amp;#10;   -- train.txt&amp;#10;   -- val.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;and if the data is like this in python&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;X_train.shape =  (5000, 1, 256, 256)&lt;br&gt;X_val.shape =  (2000, 1, 256, 256)&lt;br&gt;X_test.shape =  (500, 1, 256, 256)&lt;br&gt;y_train =  (5000,)&lt;br&gt;y_val =  (2000,)&lt;br&gt;y_test =  (500,)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The following code can be used to generate the structure of dataset&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; not os.path.exists(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    os.makedirs(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;os.chdir(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## save image&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; not os.path.exists(&lt;span class=&quot;string&quot;&gt;&#39;train&#39;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    os.makedirs(&lt;span class=&quot;string&quot;&gt;&#39;train&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xrange(Numtrain):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = &lt;span class=&quot;string&quot;&gt;&#39;train&#39;&lt;/span&gt; + str(i) + &lt;span class=&quot;string&quot;&gt;&#39;.jpg&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xx = X_train[i,]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xx =  xx.transpose(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xx = (xx - np.min(xx)) / (np.max(xx)-np.min(xx))*&lt;span class=&quot;number&quot;&gt;255.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    img = Image.fromarray(xx.astype(np.uint8), &lt;span class=&quot;string&quot;&gt;&#39;RGB&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;## Notice that the function Image.fromarray() can only save image&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                  &lt;span class=&quot;comment&quot;&gt;## of the form &#39;uint8&#39; type !!!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    img.save(&lt;span class=&quot;string&quot;&gt;&#39;train/&#39;&lt;/span&gt; + name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;............&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Create a new file named “cell” under the “examples/imagenet” path and put the data folder into it&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;copy the file “examples/iamgenet/creat_imagenet.sh into newly created folder “cell” and change it as follows&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;EXAMPLE=examples/imagenet/cell&amp;#10;DATA=examples/imagenet/cell&amp;#10;TOOLS=build/tools&amp;#10;&amp;#10;TRAIN_DATA_ROOT=examples/imagenet/cell/data/train&amp;#10;VAL_DATA_ROOT=examples/imagenet/cell/data/val&amp;#10;&amp;#10;RESIZE=true # if the images do not need resize, set it to &amp;#34;false&amp;#34;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;run command: &lt;code&gt;./examples/imagenet/myself/create_imagenet.sh&lt;/code&gt;&lt;br&gt;then lmdb file will be generated under cell folder.&lt;/p&gt;
&lt;h4 id=&quot;2&quot;&gt;&lt;a href=&quot;#2&quot; class=&quot;headerlink&quot; title=&quot;2. &quot;&gt;&lt;/a&gt;&lt;strong&gt;2. &lt;/strong&gt;&lt;/h4&gt;&lt;h3 id=&quot;ERROR-amp-REASION&quot;&gt;&lt;a href=&quot;#ERROR-amp-REASION&quot; class=&quot;headerlink&quot; title=&quot;ERROR &amp;amp; REASION&quot;&gt;&lt;/a&gt;ERROR &amp;amp; REASION&lt;/h3&gt;&lt;h4 id=&quot;Error-1-Out-of-memory&quot;&gt;&lt;a href=&quot;#Error-1-Out-of-memory&quot; class=&quot;headerlink&quot; title=&quot;Error 1: Out of memory&quot;&gt;&lt;/a&gt;Error 1: Out of memory&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;F0420 13:29:52.527748 10836 syncedmem.cpp:56] Check failed: error == cudaSuccess (2 vs. 0)  out of memory&amp;#10;*** Check failure stack trace: ***&amp;#10;    @     0x7f6cb7656dbd  google::LogMessage::Fail()&amp;#10;    @     0x7f6cb7658cf8  google::LogMessage::SendToLog()&amp;#10;    @     0x7f6cb7656953  google::LogMessage::Flush()&amp;#10;    @     0x7f6cb765962e  google::LogMessageFatal::~LogMessageFatal()&amp;#10;    @     0x7f6cb7d5b021  caffe::SyncedMemory::to_gpu()&amp;#10;    @     0x7f6cb7d5a389  caffe::SyncedMemory::mutable_gpu_data()&amp;#10;    @     0x7f6cb7d3fdf2  caffe::Blob&amp;#60;&amp;#62;::mutable_gpu_data()&amp;#10;    @     0x7f6cb7dca57f  caffe::CuDNNConvolutionLayer&amp;#60;&amp;#62;::Forward_gpu()&amp;#10;    @     0x7f6cb7d71ec5  caffe::Net&amp;#60;&amp;#62;::ForwardFromTo()&amp;#10;    @     0x7f6cb7d72237  caffe::Net&amp;#60;&amp;#62;::Forward()&amp;#10;    @     0x7f6cb7d552c7  caffe::Solver&amp;#60;&amp;#62;::Step()&amp;#10;    @     0x7f6cb7d55b89  caffe::Solver&amp;#60;&amp;#62;::Solve()&amp;#10;    @           0x40806e  train()&amp;#10;    @           0x40594c  main&amp;#10;    @     0x7f6cb6969ec5  __libc_start_main&amp;#10;    @           0x406081  (unknown)&amp;#10;Aborted (core dumped)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Reason&quot;&gt;&lt;a href=&quot;#Reason&quot; class=&quot;headerlink&quot; title=&quot;- Reason&quot;&gt;&lt;/a&gt;- Reason&lt;/h4&gt;&lt;p&gt;ERROR reasion: batch_size is too large!!! you should change the batch_size in train_val.prototxt file&lt;/p&gt;
&lt;p&gt;Notice: When you set the configuration of caffe model, something you should notice&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#34;batch_size&amp;#34;: should not be larger than 100 if you use a single GPU to train the network.&amp;#10;&amp;#10;&amp;#34;stepsize&amp;#34;: should smaller than &amp;#34;max_iter&amp;#34; and also should be the divisor of &amp;#34;max_iter&amp;#34;.&amp;#10;&amp;#10;&amp;#34;test_iter&amp;#34;: should be the multiple of (val_size / batch_size) [val_size is the size of val data, and the batch_size describe the batch size of val data].&amp;#10;&amp;#10;&amp;#34;test_interval&amp;#34; should better be the multiple of (train_size / batch_size) [train_size is the size of your train data, and the batch_size describe the batch size of train data].&amp;#10;&amp;#10;Since the result is better when you train on your whole train dataset. and this variable determine the model should be test after every how many iterations.&amp;#10;&amp;#10;&amp;#34;stepsize&amp;#34;: determine the &amp;#34;base_lr&amp;#34; should be reduced by &amp;#34;weight_decay&amp;#34; value after how many times iterations.&amp;#10;&amp;#10;&amp;#34;snapshot&amp;#34;: determine the intermidiate results should be stored every how many times of iterations.&amp;#10;&amp;#10;&amp;#34;snapshot_prefix&amp;#34;: determine the directory of storing the snapshot results&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;One example of prototxt configuration:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#####################&amp;#10;## solver.prototxt ##&amp;#10;#####################&amp;#10;&amp;#10;net: &amp;#34;examples/imagenet/cell/train_val.prototxt&amp;#34;&amp;#10;test_iter: 40&amp;#10;test_interval: 40&amp;#10;base_lr: 0.01&amp;#10;lr_policy: &amp;#34;step&amp;#34;&amp;#10;gamma: 0.1&amp;#10;stepsize: 100000&amp;#10;display: 20&amp;#10;max_iter: 10000&amp;#10;momentum: 0.9&amp;#10;weight_decay: 0.0005&amp;#10;snapshot: 1000&amp;#10;snapshot_prefix: &amp;#34;examples/imagenet/cell/model/caffenet_train&amp;#34;&amp;#10;solver_mode: GPU&amp;#10;&amp;#10;&amp;#10;########################&amp;#10;## train_val.prototxt ##&amp;#10;########################&amp;#10;&amp;#10;name: &amp;#34;CaffeNet&amp;#34;&amp;#10;layer &amp;#123;&amp;#10;  name: &amp;#34;data&amp;#34;&amp;#10;  type: &amp;#34;Data&amp;#34;&amp;#10;  top: &amp;#34;data&amp;#34;&amp;#10;  top: &amp;#34;label&amp;#34;&amp;#10;  include &amp;#123;&amp;#10;    phase: TRAIN&amp;#10;  &amp;#125;&amp;#10;  transform_param &amp;#123;&amp;#10;    mirror: true&amp;#10;    crop_size: 227&amp;#10;    mean_file: &amp;#34;examples/imagenet/cell/imagenet_mean.binaryproto&amp;#34;&amp;#10;  &amp;#125;&amp;#10;# mean pixel / channel-wise mean instead of mean image&amp;#10;#  transform_param &amp;#123;&amp;#10;#    crop_size: 227&amp;#10;#    mean_value: 104&amp;#10;#    mean_value: 117&amp;#10;#    mean_value: 123&amp;#10;#    mirror: true&amp;#10;#  &amp;#125;&amp;#10;  data_param &amp;#123;&amp;#10;    source: &amp;#34;examples/imagenet/cell/train_lmdb&amp;#34;&amp;#10;    batch_size: 250&amp;#10;    backend: LMDB&amp;#10;  &amp;#125;&amp;#10;&amp;#125;&amp;#10;layer &amp;#123;&amp;#10;  name: &amp;#34;data&amp;#34;&amp;#10;  type: &amp;#34;Data&amp;#34;&amp;#10;  top: &amp;#34;data&amp;#34;&amp;#10;  top: &amp;#34;label&amp;#34;&amp;#10;  include &amp;#123;&amp;#10;    phase: TEST&amp;#10;  &amp;#125;&amp;#10;  transform_param &amp;#123;&amp;#10;    mirror: false&amp;#10;    crop_size: 227&amp;#10;    mean_file: &amp;#34;examples/imagenet/cell/imagenet_mean.binaryproto&amp;#34;&amp;#10;  &amp;#125;&amp;#10;# mean pixel / channel-wise mean instead of mean image&amp;#10;#  transform_param &amp;#123;&amp;#10;#    crop_size: 227&amp;#10;#    mean_value: 104&amp;#10;#    mean_value: 117&amp;#10;#    mean_value: 123&amp;#10;#    mirror: false&amp;#10;#  &amp;#125;&amp;#10;  data_param &amp;#123;&amp;#10;    source: &amp;#34;examples/imagenet/cell/val_lmdb&amp;#34;&amp;#10;    batch_size: 50&amp;#10;    backend: LMDB&amp;#10;  &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ImageNet&quot;&gt;&lt;a href=&quot;#ImageNet&quot; class=&quot;headerlink&quot; title=&quot;ImageNet&quot;&gt;&lt;/a&gt;ImageNet&lt;/h2&gt;&lt;p&gt;This part is a simplified instruction of training own data using &lt;a href=&quot;http://caffe.berkeleyvision.org/&quot;&gt;Caffe&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="note" scheme="http://monaen.github.io/Acadeblog/categories/note/"/>
    
    
      <category term="caffe" scheme="http://monaen.github.io/Acadeblog/tags/caffe/"/>
    
      <category term="deep learning" scheme="http://monaen.github.io/Acadeblog/tags/deep-learning/"/>
    
      <category term="note" scheme="http://monaen.github.io/Acadeblog/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Caffe Training Note</title>
    <link href="http://monaen.github.io/Acadeblog/2016/04/21/Caffe-Training-Experiment/"/>
    <id>http://monaen.github.io/Acadeblog/2016/04/21/Caffe-Training-Experiment/</id>
    <published>2016-04-20T16:00:00.000Z</published>
    <updated>2016-05-03T14:49:54.000Z</updated>
    
    <content type="html">&lt;p&gt;Caffe is an open-source deep learning framework originally created by Yangqing Jia which allows you to leverage your GPU for training neural networks. As opposed to other deep learning frameworks like Theano or Torch you don’t have to program the algorithms yourself; instead you specify your network by means of configuration files. Obviously this approach is less time consuming than programming everything on your own, but it also forces you to stay within the boundaries of the framework, of course. Practically though this won’t matter most of the time as the framework Caffe provides is quite powerful and continuously advanced.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Defining the Model and Meta-Parameters&lt;/p&gt;
&lt;p&gt;Training of a model and its application requires at least three configuration files. The format of those configuration files follows an interface description language called protocol buffers. It supeficially resembles JSON but is significantly different and actually supposed to replace it in use cases where the data document needs to be validateable (by means of a custom schema – like this one for Caffe) and serializable.&lt;/p&gt;
&lt;p&gt;For training you need one prototxt-file keeping the meta-parameters (config.prototxt) of the training and the model and another for defining the graph of the network (model_train_test.prototxt) – connecting the layers in an acyclical and directed fashion. Note that the data flows from bottom  to top  with regards to how the order of layers is specified. The example network here is composed of five layers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;data layer (one for TRAINing and one for TESTing)&lt;/li&gt;
&lt;li&gt;inner product layer (the weights I)&lt;/li&gt;
&lt;li&gt;rectified linear units (the hidden layer)&lt;/li&gt;
&lt;li&gt;inner product layer (the weights II)&lt;/li&gt;
&lt;li&gt;output layer (Soft Max for classification)&lt;br&gt; A. soft max layer giving the loss&lt;br&gt; B. accuracy layer – so we can see how the network improves while training.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;File-structure&quot;&gt;&lt;a href=&quot;#File-structure&quot; class=&quot;headerlink&quot; title=&quot;File structure&quot;&gt;&lt;/a&gt;File structure&lt;/h3&gt;&lt;p&gt;Relevant files&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;strong&gt;net prototxt&lt;/strong&gt;, defining the architecture and pointing to the train/test data&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;solver prototxt&lt;/strong&gt;, defining the learning parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Error-amp-Solution-tips&quot;&gt;&lt;a href=&quot;#Error-amp-Solution-tips&quot; class=&quot;headerlink&quot; title=&quot;Error &amp;amp; Solution tips&quot;&gt;&lt;/a&gt;Error &amp;amp; Solution tips&lt;/h3&gt;&lt;p&gt;If the batch_size is small but still get the error out of memory, it might be some other processes are using GPU at the same time using command &lt;code&gt;nvidia-smi&lt;/code&gt; to check your GPU memory.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Caffe is an open-source deep learning framework originally created by Yangqing Jia which allows you to leverage your GPU for training neural networks. As opposed to other deep learning frameworks like Theano or Torch you don’t have to program the algorithms yourself; instead you specify your network by means of configuration files. Obviously this approach is less time consuming than programming everything on your own, but it also forces you to stay within the boundaries of the framework, of course. Practically though this won’t matter most of the time as the framework Caffe provides is quite powerful and continuously advanced.&lt;/p&gt;
    
    </summary>
    
      <category term="note" scheme="http://monaen.github.io/Acadeblog/categories/note/"/>
    
    
      <category term="deep learning" scheme="http://monaen.github.io/Acadeblog/tags/deep-learning/"/>
    
      <category term="note" scheme="http://monaen.github.io/Acadeblog/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Blog Configuration</title>
    <link href="http://monaen.github.io/Acadeblog/2016/04/20/Blog-Build-Instruction/"/>
    <id>http://monaen.github.io/Acadeblog/2016/04/20/Blog-Build-Instruction/</id>
    <published>2016-04-19T16:00:00.000Z</published>
    <updated>2016-04-20T13:23:52.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Creat-a-tags-cloud-page&quot;&gt;&lt;a href=&quot;#Creat-a-tags-cloud-page&quot; class=&quot;headerlink&quot; title=&quot;Creat a tags cloud page&quot;&gt;&lt;/a&gt;Creat a tags cloud page&lt;/h1&gt;&lt;h3 id=&quot;generate-a-new-page-named-“tags”&quot;&gt;&lt;a href=&quot;#generate-a-new-page-named-“tags”&quot; class=&quot;headerlink&quot; title=&quot;generate a new page named “tags”.&quot;&gt;&lt;/a&gt;generate a new page named “tags”.&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new page &lt;span class=&quot;string&quot;&gt;&quot;tags&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;edit-the-new-generated-file-“-source-tags-index-md”&quot;&gt;&lt;a href=&quot;#edit-the-new-generated-file-“-source-tags-index-md”&quot; class=&quot;headerlink&quot; title=&quot;edit the new generated file “./source/tags/index.md”&quot;&gt;&lt;/a&gt;edit the new generated file “./source/tags/index.md”&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;title: All tags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date: &lt;span class=&quot;number&quot;&gt;2014&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;39&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;04&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;tags&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;comments: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;## do not activate the disqus function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;add-the-“tags”-into-“menu”-open-the-config-yml-in-blog-root-path-and-add&quot;&gt;&lt;a href=&quot;#add-the-“tags”-into-“menu”-open-the-config-yml-in-blog-root-path-and-add&quot; class=&quot;headerlink&quot; title=&quot;add the “tags” into “menu”: open the _config.yml in blog root path and add:&quot;&gt;&lt;/a&gt;add the “tags” into “menu”: &lt;em&gt;open the _config.yml in blog root path and add:&lt;/em&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;menu:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  home: /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  archives: /archives&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tags: /tags&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Creat-a-tags-cloud-page&quot;&gt;&lt;a href=&quot;#Creat-a-tags-cloud-page&quot; class=&quot;headerlink&quot; title=&quot;Creat a tags cloud page&quot;&gt;&lt;/a&gt;Creat a tags clou
    
    </summary>
    
      <category term="configuration" scheme="http://monaen.github.io/Acadeblog/categories/configuration/"/>
    
    
      <category term="blog" scheme="http://monaen.github.io/Acadeblog/tags/blog/"/>
    
      <category term="configuration" scheme="http://monaen.github.io/Acadeblog/tags/configuration/"/>
    
  </entry>
  
</feed>
